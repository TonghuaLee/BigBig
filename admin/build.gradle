group 'com.broadlee.dream'
version 'unspecified'

apply plugin: 'java'
apply plugin: 'war'


repositories {
    mavenCentral()
}
configurations {
    mybatisGenerator
}
// 读取config文件夹中对应的配置文件
ext{
    def prop = new Properties();
    file("src/main/resources/config/sys.properties")
            .withInputStream {
        prop.load(it)
    }
    file("src/main/resources/config/mybatis/gradle.properties")
            .withInputStream {
        prop.load(it)
    }
    prop.each {
        project.extensions.add("$it.key",it.value);
    }

}

dependencies {

    compile project(":common")
    compile project(":logconfig")
    compile "org.projectlombok:lombok:1.16.12"
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile 'jstl:jstl:1.2'
    compile 'org.springframework:spring-aop:4.2.4.RELEASE'
    compile 'org.springframework:spring-context:4.2.4.RELEASE'
    compile 'org.springframework:spring-context-support:4.2.4.RELEASE'
    compile 'org.springframework:spring-beans:4.2.4.RELEASE'
    compile 'org.springframework:spring-web:4.2.4.RELEASE'
    compile 'org.springframework:spring-webmvc:4.2.4.RELEASE'
    compile 'org.springframework:spring-tx:4.2.4.RELEASE'
    compile 'org.springframework:spring-jdbc:4.2.4.RELEASE'
    compile 'org.springframework:spring-test:4.2.4.RELEASE'
    compile 'org.springframework:spring-core:4.2.4.RELEASE'
    compile 'org.springframework.security:spring-security-web:4.0.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.0.3.RELEASE'

    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.1'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.7'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.apache.velocity:velocity-tools:2.0'

    compile 'junit:junit:4.12'
    compile group: 'eu.medsea.mimeutil', name: 'mime-util', version: '2.1.3'
    compile group: 'tk.mybatis', name: 'mapper', version: '3.3.9'
    compile group: 'com.github.pagehelper', name: 'pagehelper', version: '4.1.6'
    compile "javax.persistence:persistence-api:1.0.2"
    // 数据
    runtime 'mysql:mysql-connector-java:6.0.5'
    compile 'com.alibaba:druid:1.0.27'
    compile 'org.mybatis:mybatis:3.4.1'
    compile 'org.mybatis:mybatis-spring:1.3.0'
    // 日志
    compile "org.slf4j:slf4j-api:1.7.22"
    runtime 'ch.qos.logback:logback-classic:1.1.8'
    // 验证
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.2.4.Final'
// 模型转json
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'

    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.apache.velocity:velocity-tools:2.0'
//
    compile 'io.jsonwebtoken:jjwt:0.7.0'
    compile 'net.sf.ehcache:ehcache:2.10.2'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'commons-dbcp:commons-dbcp:1.2.2'
    runtime 'commons-fileupload:commons-fileupload:1.3.1'

    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1"

    //excel
    compile 'net.sourceforge.jexcelapi:jxl:2.6.12'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:6.0.5'
    //lucene
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '6.5.1'
    compile group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '6.5.1'
    compile group: 'org.apache.lucene', name: 'lucene-queryparser', version: '6.5.1'
    compile group: 'org.apache.lucene', name: 'lucene-queries', version: '6.5.1'
    compile group: 'org.apache.lucene', name: 'lucene-highlighter', version: '6.5.1'
// https://mvnrepository.com/artifact/org.jsoup/jsoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'



    testCompile group: 'junit', name: 'junit', version: '4.11'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/config/jdbc-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}
// 利用ant创建一个自动生成MyBatis目录文件的task
task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['jarPath'] = project['jdbc.jarPath']
    ant.properties['driverClass'] = project['jdbc.driverClassName']
    ant.properties['connectionURL'] = project['jdbc.url']
    ant.properties['userId'] = project['jdbc.user']
    ant.properties['password'] = project['jdbc.pass']
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = project['modelPackage']
    ant.properties['mapperPackage'] = project['mapperPackage']
    ant.properties['sqlMapperPackage'] = project['sqlMapperPackage']

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )

    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/config/mybatis/generatorConfig.xml',
            verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'jarDirection')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}


task codegen << {
    def br = new BufferedReader(new FileReader('src/main/resources/codegen.tpl'))
    def sb = new StringBuilder();
    String tmp = null
    while((tmp = br.readLine()) != null) {
        sb.append(tmp);
    }
    tmp = sb.toString()
    File mysql = configurations.runtime.find{ File file -> file.name.contains('mysql-connector-java') }
    tmp = tmp.replace('__classPathEntry__', mysql.path)

    def prop = new Properties();
    prop.load(new FileInputStream('src/main/resources/config/sys.properties'))

    tmp = tmp.replace('__jdbcDriverClass__', prop.getProperty('jdbc.driverClass'))
    tmp = tmp.replace('__jdbcUrl__', prop.getProperty('jdbc.url'))
    tmp = tmp.replace('__jdbcUser__', prop.getProperty('jdbc.user'))
    tmp = tmp.replace('__jdbcPassword__', prop.getProperty('jdbc.pass'))

    File dir = new File(buildDir.path + File.separator + 'codegen/')
    if(!dir.exists()) {
        dir.mkdirs();
    }

    File cgfile = new File(dir.path + File.separator + 'codegen.xml')
    if(!cgfile.exists()) {
        cgfile.createNewFile()
    }

    def bw = new BufferedWriter(new FileWriter(cgfile, false))
    bw.write(tmp, 0, tmp.length())
    bw.flush()

    File gen = configurations.providedRuntime.find{ File file -> file.name.contains('mybatis-generator-core')}
    javaexec {
        main="-jar";
        args = [
                gen.path,
                "-configfile",
                cgfile.path
        ]
    }

}
